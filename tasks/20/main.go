package main

import (
	"fmt"
	"strings"
	"unicode"
)

/*
–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Å–ª–æ–≤–∞ –≤ —Å—Ç—Ä–æ–∫–µ. 
–ü—Ä–∏–º–µ—Ä: ¬´snow dog sun ‚Äî sun dog snow¬ª.
*/
func main() {
	s := "–º–∞—à–∏–Ω–∞  üòès—èüòí   sun –∫–æ—Ç flow                          axiom –≤–µ–¥—Ä–æ nasa melon –ø—Ä–∏-–≤–µ—Ç"
	fmt.Println(reverseWords(s))
}

func reverseWords(s string) string {
	n := []string{}
	j := []rune{}
	var prev rune
	for _, v := range s {
		//–ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Å–∏–º–≤–æ–ª - space –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π !space - –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑ j –≤ –Ω–∞–±–æ—Ä —Å—Ç—Ä–æ–∫ n –∏ —á–∏—Å—Ç–∏–º j
		if unicode.IsSpace(v) && !unicode.IsSpace(prev) {
			n = append(n, string(j))
			clear(j)
		//–ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Å–∏–º–≤–æ–ª !space - –¥–æ–±–∞–≤–ª—è–µ–º —Å–∏–≤–æ–ª –≤ j
		} else if !unicode.IsSpace(v) {
			j = append(j, v)
		}
		prev = v
	}
	n = append(n, string(j))

	//–ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –Ω–∞–±–æ—Ä —Å—Ç—Ä–æ–∫ n
	for l, r := 0, len(n) - 1; l < r; l, r = l + 1, r - 1 {
		n[l], n[r] = n[r], n[l]
	}
	//–û–±—ä–µ–¥–∏–Ω—è–µ–º –Ω–∞–±–æ—Ä —Å—Ç—Ä–æ–∫ n –≤ —Å—Ç—Ä–æ–∫—É —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º space
	return strings.Join(n, " ")
}