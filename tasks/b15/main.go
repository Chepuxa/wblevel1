package main

import (
	"fmt"
	"math/rand"
)

/*
–ö –∫–∞–∫–∏–º –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è–º –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∫–æ–¥–∞, –∏ –∫–∞–∫ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å? –ü—Ä–∏–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–∏–º–µ—Ä —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.
var justString string
func someFunc() {
  v := createHugeString(1 << 10)
  justString = v[:100]
}

func main() {
  someFunc()
}

–û—Ç–≤–µ—Ç: –°—Ä–µ–∑ –ø–æ —Å—Ç—Ä–æ–∫–µ –Ω–µ –∞–ª–ª–æ—Ü–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É, –∏ –Ω–æ–≤—ã–π —Å—Ä–µ–∑ [–±–∞–π—Ç, –ª–µ–∂–∞—â–∏–π –≤ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä–æ–∫–µ] –±—É–¥–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –º–∞—Å—Å–∏–≤ –±–∞–π—Ç —Å–æ–∑–¥–∞–Ω–Ω–æ–π –æ–≥—Ä–æ–º–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
–¢.–∫. justString –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, v –ø–æ –∏—Ç–æ–≥—É "—É–±–µ–∂–∏—Ç" –≤ —Ö–∏–ø –∏ –±—É–¥–µ—Ç —Ç–∞–º –≤–∏—Å–µ—Ç—å, —Ö–æ—Ç—è –Ω–∞–º –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ 0-99 —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Ç—Ç—É–¥–∞
–í—Ç–æ—Ä–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –≤–æ–∑–Ω–∏–∫–Ω–µ—Ç, –µ—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ v –±—É–¥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è —Å–∏–º–≤–æ–ª—ã, –∑–∞–Ω–∏–º–∞—é—â–∏–µ –±–æ–ª—å—à–µ 1 –±–∞–π—Ç–∞, –≤ —Å–ª–µ–¥—Å—Ç–≤–∏–∏ —á–µ–≥–æ —Å—Ä–µ–∑ –º–æ–∂–µ—Ç "—Ä–∞—Å–ø–∏–ª–∏—Ç—å" —Å–∏–º–≤–æ–ª –∏ justString –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
*/

var justString string

func main() {
	n := 100
	someFunc(n)
	fmt.Println(len([]rune(justString)) == n)
}

func someFunc(n int) {
	v := createHugeString(1 << 10)
	justString = string(copyBytes([]rune(v), n))
}

func createHugeString(n int) string {
	const letters = "qwertnm–π—ÜüòèüòíüôÇ‚Äç‚ÜîÔ∏èüòûüòî—É–∫–µ–Ω–≥—à–º–∏—Ç—å–±üòÅ—é‰∏ñüññüññÁïå"
	runes := []rune(letters)
	buffer := make([]rune, n)
	for b := range buffer {
		buffer[b] = runes[rand.Intn(len(runes))]
	}
	return string(buffer)
}

func copyBytes(s []rune, n int) []rune {
	res := make([]rune, n)
	for i := 0; i < n; i++ {
		res[i] = s[i]
	}
	return res
}