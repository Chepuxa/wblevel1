package main

import "fmt"

/*
Вопрос: Что такое интерфейсы, как они применяются в Go?

Ответ:
Интерфейс можно описать как контракт, который реализуется другими типами.
В интерфейсе описываются сигнатуры методов, которые входят в контракт, и каждый тип, который реализует эти методы, реализовывает контракт (duck typing).
Если в качестве параметра или возвращаемого типа мы указываем интерфейс, то можно использовать любой тип, который этот интерфейс реализует,
что позволяет добиться какой-то степени полиморфизма.
В качестве примера использования можно привести:
 - Тип, обладающий методом String() string, реализует интерфейс Stringer. Реализация этого интерфейса показывает, что у типа есть строковое представление
 - Для написания своих видов ошибок можно реализовать интерфейс error, включающий в себя метод Error() string. Тип, реализующий ошибку, можно будет возвращать из функции в качестве error.
interface{} - интерфейс, реализованный всеми типами по умолчанию, соответственно, в качестве interface{} можно использовать любой тип. Имеет Alias any.
*/

type Animal interface {
	Sound() string
}

type Dog struct{}

func NewDog() *Dog {
	return &Dog{}
}

func (d *Dog) Sound() string {
	return "Bark"
}

type Cat struct{}

func (c *Cat) Sound() string {
	return "Meow"
}

func NewCat() *Cat {
	return &Cat{}
}

func MakeSound(a Animal) {
	fmt.Println(a.Sound())
}

func main() {
	d := NewDog()
	MakeSound(d)

	c := NewCat()
	MakeSound(c)
}
